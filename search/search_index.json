{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Hello World</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"basics/error-handling/","title":"Error Handling","text":""},{"location":"basics/logging/","title":"Logging","text":""},{"location":"basics/middleware/","title":"Middleware","text":""},{"location":"basics/request/","title":"Request","text":""},{"location":"basics/response/","title":"Response","text":""},{"location":"basics/routing/","title":"Routing","text":""},{"location":"basics/testing/","title":"Testing","text":""},{"location":"basics/validation/","title":"Validation","text":""},{"location":"components/overview/","title":"Overview","text":""},{"location":"components/console/installation/","title":"Installation","text":""},{"location":"components/console/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/console/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/console/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/console/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>Console</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-console\", url: \"https://github.com/chaqmoq/console.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>Console</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"Console\", package: \"chaqmoq-console\")\n    ])\n]\n</code></pre>"},{"location":"components/console/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>Console</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>Console</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/console/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>Console</code> package URL: <code>https://github.com/chaqmoq/console.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>Console</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/console/usage/","title":"Usage","text":""},{"location":"components/dotenv/installation/","title":"Installation","text":""},{"location":"components/dotenv/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/dotenv/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/dotenv/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/dotenv/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>DotEnv</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-dotenv\", url: \"https://github.com/chaqmoq/dotenv.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>DotEnv</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"DotEnv\", package: \"chaqmoq-dotenv\")\n    ])\n]\n</code></pre>"},{"location":"components/dotenv/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>DotEnv</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>DotEnv</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/dotenv/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>DotEnv</code> package URL: <code>https://github.com/chaqmoq/dotenv.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>DotEnv</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/dotenv/overview/","title":"Overview","text":"<p>Reads, parses, loads, and caches environment files and variables. Here is an example of the <code>.env</code> file in the current directory and all the possible types of content it can have and what they result in.</p> <pre><code># Comment\nEMTPY=\nQUOTED=\"quoted\"\nQUOTED_WITH_WHITESPACE=\" quoted with whitespace \" # Trailing comment\nMULTI_LINE=\"multi\nline\"\nUNQUOTED=unquoted\nUNQUOTED_WITH_WHITESPACE= unquoted with whitespace\nDICTIONARY={\"key\": \"value\"}\nPATH=/path/to\nlowercased=lowercased\n</code></pre> <pre><code>import DotEnv\n\nlet env = DotEnv()\nlet path = \"./.env\"\n\ndo {\n    try env.load(at: path)\n} catch {\n    print(error)\n}\n\nprint(env[\"EMTPY\"]) // Prints Optional(\"\")\nprint(env[\"QUOTED\"]) // Prints Optional(\"quoted\")\nprint(env[\"QUOTED_WITH_WHITESPACE\"]) // Prints Optional(\" quoted with whitespace \")\nprint(env[\"MULTI_LINE\"]) // Prints Optional(\"multi\\nline\")\nprint(env[\"UNQUOTED\"]) // Prints Optional(\"unquoted\")\nprint(env[\"UNQUOTED_WITH_WHITESPACE\"]) // Prints Optional(\"unquoted with whitespace\")\nprint(env[\"DICTIONARY\"]) // Prints Optional(\"{\\\"key\\\": \\\"value\\\"}\")\nprint(env[\"PATH\"]) // Prints Optional(\"/path/to\")\nprint(env[\"lowercased\"]) // Prints Optional(\"lowercased\")\n</code></pre>"},{"location":"components/dotenv/usage/","title":"Usage","text":""},{"location":"components/dotenv/usage/#environment-files","title":"Environment files","text":""},{"location":"components/dotenv/usage/#reading","title":"Reading","text":"<p>Here is how we can read an environment file named <code>.env</code> from the current directory by using the <code>readFile(at:)</code> method.</p> <pre><code>import DotEnv\n\nlet env = DotEnv()\nlet path = \"./.env\"\n\ndo {\n    let file = try env.readFile(at: path)\n    print(file)\n} catch {\n    print(error)\n}\n</code></pre> <p>When reading an environment file, the <code>encoding</code> is set to <code>utf8</code> by default. We can change it by providing a different value to the second argument like <code>utf16</code>.</p> <pre><code>do {\n    let file = try env.readFile(at: path, encoding: .utf16)\n    print(file)\n} catch {\n    print(error)\n}\n</code></pre>"},{"location":"components/dotenv/usage/#parsing","title":"Parsing","text":"<p>Parsing an environment file and extracting environment variables are done in a similar way by using <code>parseFile(at:)</code> method.</p> <pre><code>do {\n    let variables = try env.parseFile(at: path)\n    print(variables)\n} catch {\n    print(error)\n}\n</code></pre> <p>You can read and parse an environment file separately if you want.</p> <pre><code>do {\n    let file = try env.readFile(at: path)\n    let variables = try env.parseFile(file)\n    print(variables)\n} catch {\n    print(error)\n}\n</code></pre>"},{"location":"components/dotenv/usage/#loading","title":"Loading","text":"<p>Loading an environment file means reading and parsing its content and setting the extracted environment variables in one go.</p> <pre><code>do {\n    try env.load(at: path)\n} catch {\n    print(error)\n}\n</code></pre> <p>Sometimes, you may want to define an environment file programmatically without creating one in the file system and load its environment variables.</p> <pre><code>import DotEnv\n\nlet env = DotEnv()\nlet file: File = \"\"\"\nDATABASE_USER=root\nDATABASE_PASSWORD=password\n\"\"\"\n\ndo {\n    try env.load(file)\n} catch {\n    print(error)\n}\n</code></pre>"},{"location":"components/dotenv/usage/#caching","title":"Caching","text":"<p>By default, <code>DotEnv</code> tries to cache an environment file using its <code>path</code> property as a <code>cache key</code>. But, when we create an environment file programmatically without saving it in the file system, it uses its content as a <code>cache key</code>. Caching an environment file happens when we read or parse it for the first time. Later calls to the same environment file return the cached file or variables based on which method we call. We can clear the cache by calling the <code>clearCache()</code> method.</p> <pre><code>import DotEnv\n\nlet env = DotEnv()\nlet path = \"./.env\"\n\ndo {\n    print(try env.readFile(at: path)) // Reads the environment file and caches it\n    print(try env.readFile(at: path)) // Returns the environment file from the cache\n    env.clearCache() // Clears all cached environment files and variables\n    print(try env.readFile(at: path)) // Reads the environment file and caches it\n} catch {\n    print(error)\n}\n</code></pre> <pre><code>do {\n    print(try env.parseFile(at: path)) // Parses the environment file and caches it and its variables\n    print(try env.parseFile(at: path)) // Returns the environment variables from the cache\n    env.clearCache() // Clears all cached environment files and variables\n    print(try env.parseFile(at: path)) // Parses the environment file and caches it and its variables\n} catch {\n    print(error)\n}\n</code></pre>"},{"location":"components/dotenv/usage/#environment-variables","title":"Environment variables","text":""},{"location":"components/dotenv/usage/#setting-and-getting","title":"Setting and getting","text":"<p>We can set an environment variable and retrieve its value by using the <code>set(_:forKey:overwrite:)</code> and <code>get(_:encoding:)</code> methods respectively. By default, the <code>set(_:forKey:overwrite:)</code> overwrites the value of an environment variable if it already exists. If it is not something you want, provide <code>false</code> to the <code>overwrite</code> argument.</p> <pre><code>import DotEnv\n\nlet env = DotEnv()\n\nenv.set(\"root\", forKey: \"DATABASE_USER\")\nprint(env.get(\"DATABASE_USER\")) // Prints Optional(\"root\")\n\nenv.set(\"admin\", forKey: \"DATABASE_USER\", overwrite: false)\nprint(env.get(\"DATABASE_USER\")) // Prints Optional(\"root\")\n</code></pre> <p><code>DotEnv</code> also supports setting and getting an environment variable with the <code>subscript</code> method. It is important to note that this method either sets or overwrites the value of the existing environment variable.</p> <pre><code>import DotEnv\n\nlet env = DotEnv()\nenv[\"DATABASE_USER\"] = \"admin\"\nprint(env[\"DATABASE_USER\"]) // Prints Optional(\"admin\")\n</code></pre> <p>It is also possible to set multiple environment variable at once with the <code>set(_:overwrite:)</code> method.</p> <pre><code>import DotEnv\n\nlet env = DotEnv()\nenv.set([\n    \"DATABASE_DRIVER\": \"postgres\",\n    \"DATABASE_USER\": \"root\",\n    \"DATABASE_PASSWORD\": \"password\"\n])\nprint(env.get(\"DATABASE_DRIVER\")) // Prints Optional(\"postgres\")\nprint(env.get(\"DATABASE_USER\")) // Prints Optional(\"root\")\nprint(env.get(\"DATABASE_PASSWORD\")) // Prints Optional(\"password\")\n</code></pre>"},{"location":"components/dotenv/usage/#unsetting-and-resetting","title":"Unsetting and resetting","text":"<p>Sometimes, you may want to delete one or all user-defined environment variables. The <code>unset(_:)</code> and <code>reset()</code> methods can help with that.</p> <pre><code>import DotEnv\n\nlet env = DotEnv()\nenv.set([\n    \"DATABASE_DRIVER\": \"postgres\",\n    \"DATABASE_USER\": \"root\",\n    \"DATABASE_PASSWORD\": \"password\"\n])\n\nenv.unset(\"DATABASE_DRIVER\")\nprint(env.get(\"DATABASE_DRIVER\")) // Prints nil\nprint(env.get(\"DATABASE_USER\")) // Prints Optional(\"root\")\nprint(env.get(\"DATABASE_PASSWORD\")) // Prints Optional(\"password\")\n\nenv.reset()\nprint(env.get(\"DATABASE_DRIVER\")) // Prints nil\nprint(env.get(\"DATABASE_USER\")) // Prints nil\nprint(env.get(\"DATABASE_PASSWORD\")) // Prints nil\n</code></pre>"},{"location":"components/http/installation/","title":"Installation","text":""},{"location":"components/http/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/http/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/http/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/http/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>HTTP</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-http\", url: \"https://github.com/chaqmoq/http.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>HTTP</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"HTTP\", package: \"chaqmoq-http\")\n    ])\n]\n</code></pre>"},{"location":"components/http/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>HTTP</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>HTTP</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/http/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>HTTP</code> package URL: <code>https://github.com/chaqmoq/http.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>HTTP</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/http/usage/server/","title":"Usage","text":""},{"location":"components/http/usage/server/#start-and-stop","title":"Start and stop","text":"<pre><code>import HTTP\n\nlet server = Server()\ndefer { server.stop() }\ntry server.start()\n</code></pre>"},{"location":"components/http/usage/server/#listen-to-events","title":"Listen to events","text":"<pre><code>import HTTP\n\nlet server = Server()\nserver.onStart = { _ in\n    print(\"Server has started\")\n}\nserver.onStop = {\n    print(\"Server has stopped\")\n}\nserver.onError = { error, _ in\n    print(\"Error: \\(error)\")\n}\ndefer { server.stop() }\ntry server.start()\n</code></pre>"},{"location":"components/http/usage/server/#response","title":"Response","text":""},{"location":"components/http/usage/server/#return-string","title":"Return <code>String</code>","text":"<pre><code>import HTTP\n\nlet server = Server()\nserver.onReceive = { _, _ in\n    \"Hello World\"\n}\ndefer { server.stop() }\ntry server.start()\n</code></pre>"},{"location":"components/http/usage/server/#return-response","title":"Return <code>Response</code>","text":"<pre><code>import HTTP\n\nlet server = Server()\nserver.onReceive = { request, _ in\n    Response(\"Hello World\")\n}\ndefer { server.stop() }\ntry server.start()\n</code></pre>"},{"location":"components/http/usage/server/#return-eventloopfuturestring","title":"Return <code>EventLoopFuture&lt;String&gt;</code>","text":"<pre><code>import HTTP\n\nlet server = Server()\nserver.onReceive = { request, eventLoop in\n    // Some async operation that returns EventLoopFuture&lt;String&gt;\n    let promise = eventLoop.makePromise(of: String.self)\n    eventLoop.execute {\n        promise.succeed(\"Hello World\")\n    }\n\n    return promise.futureResult\n}\ndefer { server.stop() }\ntry server.start()\n</code></pre>"},{"location":"components/http/usage/server/#return-eventloopfutureresponse","title":"Return <code>EventLoopFuture&lt;Response&gt;</code>","text":"<pre><code>import HTTP\n\nlet server = Server()\nserver.onReceive = { request, eventLoop in\n    // Some async operation that returns EventLoopFuture&lt;Response&gt;\n    let promise = eventLoop.makePromise(of: Response.self)\n    eventLoop.execute {\n        promise.succeed(Response(\"Hello World\"))\n    }\n\n    return promise.futureResult\n}\ndefer { server.stop() }\ntry server.start()\n</code></pre>"},{"location":"components/mime/installation/","title":"Installation","text":""},{"location":"components/mime/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/mime/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/mime/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/mime/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>MIME</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-mime\", url: \"https://github.com/chaqmoq/mime.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>MIME</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"MIME\", package: \"chaqmoq-mime\")\n    ])\n]\n</code></pre>"},{"location":"components/mime/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>MIME</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>MIME</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/mime/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>MIME</code> package URL: <code>https://github.com/chaqmoq/mime.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>MIME</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/mime/overview/","title":"Overview","text":"<p>A media type (also known as a Multipurpose Internet Mail Extensions or MIME type) is a standard that indicates the nature and format of a document, file, or assortment of bytes. It is defined and standardized in IETF's RFC 6838.</p>"},{"location":"components/mime/overview/#supported-mime-types","title":"Supported MIME types","text":"<p>See the full list of all supported <code>MIME</code> types with their file extensions here.</p>"},{"location":"components/mime/overview/#guessable-mime-types","title":"Guessable MIME types","text":"<ul> <li><code>application/epub+zip</code></li> <li><code>application/font-sfnt</code></li> <li><code>application/font-woff</code></li> <li><code>application/gzip</code></li> <li><code>application/pdf</code></li> <li><code>application/postscript</code></li> <li><code>application/rtf</code></li> <li><code>application/vnd.ms-cab-compressed</code></li> <li><code>application/x-7z-compressed</code></li> <li><code>application/x-bzip2</code></li> <li><code>application/x-compress</code></li> <li><code>application/x-deb</code></li> <li><code>application/x-chrome-extension</code></li> <li><code>application/x-lzip</code></li> <li><code>application/x-msdownload</code></li> <li><code>application/x-msi</code></li> <li><code>application/mxf</code></li> <li><code>application/x-nes-rom</code></li> <li><code>application/x-shockwave-flash</code></li> <li><code>application/x-sqlite3</code></li> <li><code>application/x-tar</code></li> <li><code>application/x-rar-compressed</code></li> <li><code>application/x-rpm</code></li> <li><code>application/x-archive</code></li> <li><code>application/x-xpinstall</code></li> <li><code>application/x-xz</code></li> <li><code>application/zip</code></li> <li><code>audio/amr</code></li> <li><code>audio/m4a</code></li> <li><code>audio/midi</code></li> <li><code>audio/mpeg</code></li> <li><code>audio/opus</code></li> <li><code>audio/ogg</code></li> <li><code>audio/x-flac</code></li> <li><code>audio/x-wav</code></li> <li><code>image/bmp</code></li> <li><code>image/heic</code></li> <li><code>image/flif</code></li> <li><code>image/gif</code></li> <li><code>image/jpeg</code></li> <li><code>image/png</code></li> <li><code>image/x-canon-cr2</code></li> <li><code>image/tiff</code></li> <li><code>image/vnd.adobe.photoshop</code></li> <li><code>image/vnd.ms-photo</code></li> <li><code>image/webp</code></li> <li><code>image/x-icon</code></li> <li><code>video/mp4</code></li> <li><code>video/mpeg</code></li> <li><code>video/quicktime</code></li> <li><code>video/x-flv</code></li> <li><code>video/x-m4v</code></li> <li><code>video/x-ms-wmv</code></li> <li><code>video/x-msvideo</code></li> </ul>"},{"location":"components/mime/usage/","title":"Usage","text":""},{"location":"components/mime/usage/#initialization","title":"Initialization","text":"<p>Creating a new instance of <code>MIME</code> type without any arguments results in <code>application/octet-stream</code> without a file extension.</p> <pre><code>import MIME\n\nlet mime = MIME()\nprint(mime) // \"application/octet-stream\"\nprint(mime.ext) // nil\n</code></pre> <p>If you provide valid values to the <code>type</code> and <code>subtype</code> arguments whose combination exists in the supported MIME types, it creates the corresponding <code>MIME</code> type with the appropriate default file extension. Otherwise, it falls back to <code>application/octet-stream</code> without a file extension.</p> <pre><code>import MIME\n\nlet mime = MIME(type: \"text\", subtype: \"html\")\nprint(mime) // \"text/html\"\nprint(mime.ext) // \"html\"\n</code></pre> <p>You can also combine the <code>type</code> and <code>subtype</code> arguments together.</p> <pre><code>import MIME\n\nlet mime = MIME(\"application/java-archive\")\nprint(mime) // \"application/java-archive\"\nprint(mime.ext) // \"jar\"\n</code></pre> <p>There are quite a lot of <code>MIME</code> types that support multiple file extensions. The default one is chosen if you don't provide a valid value to the <code>ext</code> argument as a hint. Providing an invalid file extension leads to falling back to the default file extension.</p> <pre><code>import MIME\n\nlet mime = MIME(\"application/java-archive\", ext: \"war\") // Defaults to `jar`\nprint(mime) // \"application/java-archive\"\nprint(mime.ext) // \"war\"\n</code></pre> <p>A new instance of <code>MIME</code> can also be instantiated with the <code>ext</code> argument only that can automatically set the <code>type</code> and <code>subtype</code> properties. If the value is not a valid file extension, it falls back to <code>application/octet-stream</code> without a file extension.</p> <pre><code>import MIME\n\nlet mime = MIME(ext: \"css\")\nprint(mime) // \"text/css\"\nprint(mime.ext) // \"css\"\n</code></pre> <p>Last but not least, you can initialize a new instance of <code>MIME</code> type with the <code>path</code> or <code>url</code> arguments that work the same way as the <code>ext</code> argument.</p> <pre><code>import MIME\n\nlet mime = MIME(path: \"/public/js/main.js\")\nprint(mime) // \"text/javascript\"\nprint(mime.ext) // \"js\"\n</code></pre> <pre><code>import MIME\n\nlet mime = MIME(url: URL(string: \"https://chaqmoq.dev/public/img/logo.png\")!)\nprint(mime) // \"image/png\"\nprint(mime.ext) // \"png\"\n</code></pre>"},{"location":"components/mime/usage/#guessing","title":"Guessing","text":"<p><code>MIME</code> types can be guessed from <code>bytes</code> or <code>Data</code>. See the full list of all guessable MIME types for more info.</p>"},{"location":"components/mime/usage/#bytes","title":"Bytes","text":"<pre><code>import MIME\n\nlet bytes: [UInt8] = [0x47, 0x49, 0x46, ...]\nlet mime = MIME.guess(from: bytes)\nprint(mime) // \"image/gif\"\nprint(mime.ext) // \"gif\"\n</code></pre>"},{"location":"components/mime/usage/#data","title":"Data","text":"<pre><code>import MIME\n\nlet data = Data([0xFF, 0xD8, 0xFF, ...])\nlet mime = MIME.guess(from: data)\nprint(mime) // \"image/jpeg\"\nprint(mime.ext) // \"jpg\"\n</code></pre>"},{"location":"components/resolver/installation/","title":"Installation","text":""},{"location":"components/resolver/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/resolver/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/resolver/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/resolver/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>Resolver</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-resolver\", url: \"https://github.com/chaqmoq/resolver.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>Resolver</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"Resolver\", package: \"chaqmoq-resolver\")\n    ])\n]\n</code></pre>"},{"location":"components/resolver/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>Resolver</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>Resolver</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/resolver/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>Resolver</code> package URL: <code>https://github.com/chaqmoq/resolver.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>Resolver</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/resolver/usage/","title":"Usage","text":""},{"location":"components/routing/installation/","title":"Installation","text":""},{"location":"components/routing/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/routing/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/routing/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/routing/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>Routing</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-routing\", url: \"https://github.com/chaqmoq/routing.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>Routing</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"Routing\", package: \"chaqmoq-routing\")\n    ])\n]\n</code></pre>"},{"location":"components/routing/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>Routing</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>Routing</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/routing/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>Routing</code> package URL: <code>https://github.com/chaqmoq/routing.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>Routing</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/routing/usage/","title":"Usage","text":"<pre><code>import Routing\n\n// RouteCollection\nlet routes = RouteCollection([\n    Route(method: .GET, path: \"/posts\", name: \"post_list\") { _ in Response() }!,\n    Route(method: .POST, path: \"/posts\", name: \"post_create\") { _ in Response() }!\n])\nlet posts = routes.builder.grouped(\"/posts\", name: \"post_\")!\nposts.group(\"/{id&lt;\\\\d+&gt;}\") { post in\n    post.delete(name: \"delete\") { _ in Response() }\n    post.get(name: \"get\") { _ in Response() }\n    post.put(name: \"update\") { _ in Response() }\n}\nprint(routes.count) // 4\nprint(routes[.DELETE].count) // 1\nprint(routes[.GET].count) // 2\nprint(routes[.POST].count) // 1\nprint(routes[.PUT].count) // 1\n\n// Router\nlet router = Router(routes: routes)\n\n// Resolving a Route\nvar route = router.resolveRouteBy(method: .GET, uri: \"/posts\")!\nprint(route.name) // \"post_list\"\n\nroute = router.resolveRoute(named: \"post_get\", parameters: [\"id\": \"1\"])!\nprint(route.name) // \"post_get\"\n\nroute = router.resolveRoute(named: \"post_create\")!\nprint(route.name) // \"post_create\"\n\n// Generating a URL\nvar url = router.generateURLForRoute(named: \"post_list\", query: [\"filter\": \"latest\"])!\nprint(url.absoluteString) // \"/posts?filter=latest\"\n\nurl = router.generateURLForRoute(named: \"post_get\", parameters: [\"id\": \"1\"], query: [\"shows_tags\": \"true\"])!\nprint(url.absoluteString) // \"/posts/1?shows_tags=true\"\n\nurl = router.generateURLForRoute(named: \"post_delete\", parameters: [\"id\": \"1\"])!\nprint(url.absoluteString) // \"/posts/1\"\n</code></pre>"},{"location":"components/templating/installation/","title":"Installation","text":""},{"location":"components/templating/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/templating/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/templating/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/templating/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>Templating</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-templating\", url: \"https://github.com/chaqmoq/templating.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>Templating</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"Templating\", package: \"chaqmoq-templating\")\n    ])\n]\n</code></pre>"},{"location":"components/templating/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>Templating</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>Templating</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/templating/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>Templating</code> package URL: <code>https://github.com/chaqmoq/templating.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>Templating</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/templating/usage/","title":"Usage","text":""},{"location":"components/validation/installation/","title":"Installation","text":""},{"location":"components/validation/installation/#swift","title":"Swift","text":"<p>Download and install Swift 5.3 or higher.</p>"},{"location":"components/validation/installation/#swift-package-manager","title":"Swift Package Manager","text":""},{"location":"components/validation/installation/#new-package","title":"New Package","text":"<p>This creates a new executable package named <code>MyPackage</code>.</p> <pre><code>mkdir MyPackage\ncd MyPackage\nswift package init --type executable\n</code></pre>"},{"location":"components/validation/installation/#package-manifest","title":"Package Manifest","text":"<p>Add the <code>Validation</code> package as a dependency by specifying its <code>name</code>, <code>url</code>, and <code>version</code>.</p> <pre><code>dependencies: [\n    .package(name: \"chaqmoq-validation\", url: \"https://github.com/chaqmoq/validation.git\", from: \"1.0.0\")\n]\n</code></pre> <p>Add the <code>Validation</code> target to your desired target as a dependency by specifying its <code>name</code> and <code>package</code> where you want to import and use it. In this case, we are adding it to the default target named <code>MyPackage</code> generated using the <code>swift package init</code> command we executed earlier.</p> <pre><code>targets: [\n    .target(name: \"MyPackage\", dependencies: [\n        .product(name: \"Validation\", package: \"chaqmoq-validation\")\n    ])\n]\n</code></pre>"},{"location":"components/validation/installation/#build","title":"Build","text":"<p>This builds the <code>MyPackage</code> and installs the <code>Validation</code> package with the <code>Debug</code> configuration needed for development.</p> <pre><code>swift build\n</code></pre> <p>Once you are ready to deploy, you can run the command below that builds the <code>MyPackage</code> and installs the <code>Validation</code> package with the <code>Release</code> configuration optimized for production.</p> <pre><code>swift build -c release\n</code></pre>"},{"location":"components/validation/installation/#xcode-project","title":"Xcode Project","text":"<ol> <li>Open your <code>Xcode</code> project.</li> <li>Go to <code>File</code> -&gt; <code>Swift Packages</code> -&gt; <code>Add Package Dependency</code>.</li> <li>Enter the <code>Validation</code> package URL: <code>https://github.com/chaqmoq/validation.git</code>.</li> <li>Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy.</li> <li>Add the <code>Validation</code> package to your desired target of the <code>MyPackage</code> where you want to import and use it.</li> </ol>"},{"location":"components/validation/overview/","title":"Overview","text":""},{"location":"components/validation/overview/#built-in-constraints","title":"Built-in constraints","text":"<ul> <li><code>AndConstraint</code></li> <li><code>BlankConstraint</code></li> <li><code>EmailConstraint</code></li> <li><code>IPConstraint</code></li> <li><code>IntegerConstraint</code></li> <li><code>JSONConstraint</code></li> <li><code>LengthConstraint</code></li> <li><code>NotBlankConstraint</code></li> <li><code>OrConstraint</code></li> <li><code>RegexConstraint</code></li> <li><code>URLConstraint</code></li> <li><code>UUIDConstraint</code></li> <li><code>VINConstraint</code></li> </ul>"},{"location":"components/validation/usage/","title":"Usage","text":""},{"location":"components/validation/usage/#array-of-constraints","title":"Array of constraints","text":"<pre><code>import Validation\n\nlet password = \"12345\"\nlet validator = Validator()\n\n// An array of constraints\ntry validator.validate(\n    password,\n    against: [NotBlankConstraint(), LengthConstraint(min: 6, max: 16)]\n)\n</code></pre>"},{"location":"components/validation/usage/#variadic-list-of-constraints","title":"Variadic list of constraints","text":"<pre><code>// A variadic list of constraints\ntry validator.validate(\n    password,\n    against: NotBlankConstraint(), LengthConstraint(min: 6, max: 16)\n)\n</code></pre>"},{"location":"components/validation/usage/#convenience-api","title":"Convenience API","text":"<pre><code>// A convenience API for the existing constraints\ntry validator.validate(\n    password,\n    against: [.notBlank(), .length(min: 6, max: 16)]\n)\n</code></pre>"},{"location":"components/validation/usage/#custom-constraint","title":"Custom constraint","text":"<pre><code>// A custom validator\nstruct CustomValidator: ConstraintValidator {\n    func validate(_ value: String, against constraints: [Constraint]) throws {\n        // A validation logic here.\n    }\n}\n\n// A custom constraint\nstruct CustomConstraint: Constraint {\n    let validator: ConstraintValidator = CustomValidator()\n}\n\n// An array of constraints\ntry validator.validate(\n    password,\n    against: [NotBlankConstraint(), LengthConstraint(min: 6, max: 16), CustomConstraint()]\n)\n</code></pre>"},{"location":"components/validation/usage/#validation-group","title":"Validation group","text":""},{"location":"components/validation/usage/#default-group","title":"Default group","text":"<pre><code>import Validation\n\nlet group = Group.default\n</code></pre>"},{"location":"components/validation/usage/#custom-group","title":"Custom group","text":"<pre><code>import Validation\n\nlet custom = Group(stringLiteral: \"custom\")\n</code></pre> <pre><code>let custom: Group = \"custom\"\n</code></pre> <pre><code>let custom = Group(\"custom\")\n</code></pre>"},{"location":"components/validation/usage/#validation-using-groups","title":"Validation using groups","text":"<pre><code>try validator.validate(\n    password,\n    against: NotBlankConstraint(), LengthConstraint(min: 6, max: 16)\n    on: [custom]\n)\n</code></pre> <pre><code>try validator.validate(\n    password,\n    against: NotBlankConstraint(), LengthConstraint(min: 6, max: 16)\n    on: [.default, custom]\n)\n</code></pre>"},{"location":"getting-started/directory-structure/","title":"Directory Structure","text":""},{"location":"getting-started/hello-world/","title":"Hello World","text":""},{"location":"getting-started/installation/linux/","title":"Linux","text":""},{"location":"getting-started/installation/macos/","title":"MacOS","text":""},{"location":"getting-started/installation/windows/","title":"Windows","text":""}]}